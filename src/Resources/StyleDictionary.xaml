<!-- Словарь стилей компонент -->
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:controls="clr-namespace:Ascon.Pilot.Theme.Controls;assembly=Ascon.Pilot.Theme"
                    xmlns:tools="clr-namespace:Ascon.Pilot.Theme.Tools;assembly=Ascon.Pilot.Theme"
                    xmlns:converters="clr-namespace:PilotLookUp.Model">


    <!-- Ресурсы Pilot -->
    <ResourceDictionary.MergedDictionaries>
        <tools:SharedResourceDictionary Source="/Ascon.Pilot.Theme;component/Themes/StandardControls.xaml" />
        <tools:SharedResourceDictionary Source="/Ascon.Pilot.Theme;component/Themes/SharedResources/SharedResources.xaml" />
        <tools:SharedResourceDictionary Source="/Ascon.Pilot.Theme;component/Themes/standardcontrols/textblock.xaml" />
        <tools:SharedResourceDictionary Source="/Ascon.Pilot.Theme;component/Themes/standardcontrols/togglebutton.xaml" />
    </ResourceDictionary.MergedDictionaries>


    <converters:EqualityConverter x:Key="EqualityConverter"/>
    <converters:StringStartsWithConverter x:Key="StringStartsWithConverter"/>

    <!-- Стиль для TextBlock в DataGrid с логикой цветов -->
    <Style TargetType="TextBlock" x:Key="DataGridTextBlock_Style">
        <Setter Property="Foreground" Value="{DynamicResource NormalForeground}" />
        <Setter Property="FontSize" Value="{DynamicResource DefaultFontSize}" />
        
        <!-- Стили для разных типов элементов (та же логика что и у ListBoxItem) -->
        <Style.Triggers>
            <!-- Элементы с ошибками - используем системный цвет для критических уведомлений -->
            <DataTrigger Binding="{Binding Discription, Converter={StaticResource StringStartsWithConverter}, ConverterParameter='Error:'}" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.InfoBrushKey}}" />
            </DataTrigger>
            <!-- Элементы по которым можно переходить - используем системный акцентный цвет -->
            <DataTrigger Binding="{Binding IsLookable}" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>


    <!-- Стиль текста -->
    <Style TargetType="TextBlock"
           x:Key="TextBlock_Style">
        <Setter Property="Foreground"
                Value="{DynamicResource NormalForeground}" />
        <Setter Property="FontSize"
                Value="{DynamicResource DefaultFontSize}" />
        <Setter Property="Margin"
                Value="0,2,0,2" />
        <Setter Property="TextWrapping"
                Value="Wrap" />
        <Setter Property="VerticalAlignment"
                Value="Center" />
        <Setter Property="HorizontalAlignment"
                Value="Stretch" />
    </Style>

    <!-- Стиль лейбла -->
    <Style TargetType="Label"
           x:Key="Label_Style">
        <Setter Property="Foreground"
                Value="{DynamicResource NormalForeground}" />
        <Setter Property="FontSize"
                Value="{DynamicResource DefaultFontSize}" />
        <Setter Property="Margin"
                Value="0,2,0,2" />
        <Setter Property="VerticalAlignment"
                Value="Center" />
        <Setter Property="HorizontalAlignment"
                Value="Stretch" />
    </Style>


    <!-- Стиль списка -->
    <Style TargetType="ListView"
           x:Key="ListView_Style">
        <Setter Property="Background"
                Value="{DynamicResource NormalBackground}" />
        <Setter Property="Foreground"
                Value="{DynamicResource NormalForeground}" />

        <Setter Property="Margin"
                Value="0,2,0,2" />
    </Style>

    <!-- Стиль ЛистБокса -->
    <Style TargetType="ListBox"
           x:Key="ListBox_Style">
        <Setter Property="Background"
                Value="{DynamicResource NormalBackground}" />
        <Setter Property="Foreground"
                Value="{DynamicResource NormalForeground}" />

        <Setter Property="Margin"
                Value="0,2,0,2" />
    </Style>


    <!-- Стиль ЛистИтема -->
    <Style TargetType="ListBoxItem"
           x:Key="ListBoxItem_Style">
        <Setter Property="Background"
                Value="Transparent" />
        <Setter Property="Foreground"
                Value="{DynamicResource NormalForeground}" />
        <Setter Property="HorizontalContentAlignment"
                Value="Stretch" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBoxItem">
                    <Border Background="{TemplateBinding Background}"
                            Padding="5">
                        <ContentPresenter />
                    </Border>
                    <ControlTemplate.Triggers>
                        <!--Триггер для выделенного элемента-->
                        <Trigger Property="IsSelected"
                                 Value="True">
                            <Setter Property="Background"
                                    Value="{DynamicResource SelectedBackground}" />
                            <Setter Property="Foreground"
                                    Value="{DynamicResource NormalForeground}" />
                        </Trigger>
                        <!--Триггер для наведения мыши-->
                        <Trigger Property="IsMouseOver"
                                 Value="True">
                            <Setter Property="Background"
                                    Value="{DynamicResource HoverBackground}" />
                            <Setter Property="Foreground"
                                    Value="{DynamicResource NormalForeground}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        
        <!-- Стили для разных типов элементов -->
        <Style.Triggers>
            <!-- Элементы с ошибками - красный цвет -->
            <DataTrigger Binding="{Binding Discription, Converter={StaticResource StringStartsWithConverter}, ConverterParameter='Error:'}" Value="True">
                <Setter Property="Foreground" Value="Red" />
            </DataTrigger>
            <!-- Элементы по которым можно переходить - используем системный акцентный цвет -->
            <DataTrigger Binding="{Binding IsLookable}" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>


    <!-- Стиль таблицы -->
    <Style TargetType="DataGrid"
           x:Key="DataGrid_Style">
        <Setter Property="Background"
                Value="{DynamicResource NormalBackground}" />
        <Setter Property="Foreground"
                Value="{DynamicResource NormalForeground}" />
        <Setter Property="FontSize"
                Value="{DynamicResource DefaultFontSize}" />
        <Setter Property="Margin"
                Value="0,2,0,2" />
        <Setter Property="AutoGenerateColumns"
                Value="False" />
        <Setter Property="SelectionMode"
                Value="Single" />
    </Style>


    <!-- Стиль кнопки -->
    <Style TargetType="Button"
           x:Key="ButtonStyle">
        <Setter Property="Background"
                Value="{DynamicResource NormalBackground}" />
        <Setter Property="FontSize"
                Value="{DynamicResource DefaultFontSize}" />
        <Setter Property="Width"
                Value="25" />
        <Setter Property="Height"
                Value="25" />
        <Setter Property="BorderBrush"
                Value="LightGray" />
        <Style.Triggers>
            <Trigger Property="IsEnabled"
                     Value="True">
                <Setter Property="Foreground"
                        Value="{DynamicResource NormalForeground}" />
            </Trigger>
            <Trigger Property="IsEnabled"
                     Value="False">
                <Setter Property="Foreground"
                        Value="{DynamicResource DisabledForeground}" />
            </Trigger>
        </Style.Triggers>
    </Style>


    <!-- Стиль кнопки с картинкой -->
    <Style x:Key="ImageButtonStyle">
        <Setter Property="Button.Background"
                Value="{DynamicResource NormalBackground}" />
        <Setter Property="Button.FontSize"
                Value="{DynamicResource DefaultFontSize}" />
        <Setter Property="Button.Foreground"
                Value="{DynamicResource NormalForeground}" />
        <Setter Property="Button.Width"
                Value="25" />
        <Setter Property="Button.Height"
                Value="25" />
        <Setter Property="Button.HorizontalContentAlignment"
                Value="Stretch" />
        <Setter Property="Button.VerticalContentAlignment"
                Value="Stretch" />
        <Setter Property="Button.BorderBrush"
                Value="LightGray" />

    </Style>

    <!-- Кастомный стиль кнопки с картинкой -->
    <Style x:Key="CastomImageButton"
           TargetType="Button"
           BasedOn="{StaticResource ImageButtonStyle}">
        <Setter Property="Background"
                Value="{DynamicResource ButtonDefaultBackgroundBrush}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}"
                            Padding="5">
                        <ContentPresenter />
                    </Border>
                    <ControlTemplate.Triggers>
                        <!--Триггер для наведения мыши-->
                        <Trigger Property="IsMouseOver"
                                 Value="True">
                            <Setter Property="Background"
                                    Value="{DynamicResource ButtonDefaultHoverBackground}" />
                            <!--Цвет при наведении-->
                            <Setter Property="Foreground"
                                    Value="Black" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>


        <Setter Property="Width"
                Value="40" />
        <Setter Property="Height"
                Value="40" />
        <Setter Property="HorizontalAlignment"
                Value="Center" />
        <Setter Property="Margin"
                Value="0,5,0,5" />
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Image Source="{Binding}"
                           Height="20"
                           Width="20" />
                </DataTemplate>
            </Setter.Value>
        </Setter>

        <!--‑‑ НОВЫЙ блок: подсветка “активной” страницы ‑‑-->
        <Style.Triggers>
            <!-- Сравниваем Tag кнопки и ActivePage из VM -->
            <DataTrigger Value="True">
                <DataTrigger.Binding>
                    <MultiBinding Converter="{StaticResource EqualityConverter}">
                        <!-- Tag самой кнопки -->
                        <Binding RelativeSource="{RelativeSource Self}"
                             Path="Tag" />
                        <!-- Текущая страница во ViewModel -->
                        <Binding Path="ActivePage" />
                    </MultiBinding>
                </DataTrigger.Binding>

                <!-- Что меняем, когда страница активна -->
                <Setter Property="Background"
                    Value="{DynamicResource SelectedBackground}" />
                <Setter Property="Foreground"
                    Value="White" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!-- Стиль кнопки Выполнить -->
    <Style x:Key="ExecuteButton_Style">
        <Setter Property="Button.Background"
                Value="#86609B" />
        <Setter Property="Button.Foreground"
                Value="White" />
        <Setter Property="Button.FontSize"
                Value="11" />
        <Setter Property="Button.FontFamily"
                Value="./#Segoe UI" />
        <Setter Property="Button.SnapsToDevicePixels"
                Value="True" />
        <Setter Property="Button.Margin"
                Value="0,5,0,0" />
        <Setter Property="Button.HorizontalAlignment"
                Value="Right" />

        <Setter Property="Button.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border CornerRadius="0"
                            Background="{TemplateBinding Background}">
                        <Grid>
                            <ContentPresenter x:Name="MyContentPresenter"
                                              Content="{TemplateBinding Content}"
                                              HorizontalAlignment="Center"
                                              VerticalAlignment="Center"
                                              Margin="0,0,0,0" />
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsMouseOver"
                                 Value="True">
                            <Setter Property="Button.Background"
                                    Value="#86509B" />
                            <Setter Property="Button.Foreground"
                                    Value="White" />
                        </Trigger>

                        <Trigger Property="Button.IsPressed"
                                 Value="True">
                            <Setter Property="Button.Background"
                                    Value="#86309B" />
                            <Setter Property="Button.Foreground"
                                    Value="White" />
                        </Trigger>

                        <Trigger Property="Button.IsEnabled"
                                 Value="False">
                            <Setter Property="Button.Background"
                                    Value="LightGray" />
                            <Setter Property="Button.Foreground"
                                    Value="White" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- Стиль ячейки таблицы с выравниванием по центру -->
    <Style x:Key="Body_Content_DataGrid_Centering"
           TargetType="{x:Type DataGridCell}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCell}">
                    <Grid Background="{TemplateBinding Background}">
                        <ContentPresenter VerticalAlignment="Center" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- Стиль выпадающего списка -->
    <Style x:Key="ComboBox_Style">
        <Setter Property="ComboBox.IsEditable"
                Value="True" />
        <Setter Property="ComboBox.IsReadOnly"
                Value="True" />
        <Setter Property="ComboBox.FontSize"
                Value="{DynamicResource DefaultFontSize}" />
        <Setter Property="ComboBox.VerticalAlignment"
                Value="Stretch" />

        <Setter Property="ComboBox.ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock FontSize="{DynamicResource DefaultFontSize}"
                               Foreground="{DynamicResource NormalForeground}"
                               HorizontalAlignment="Left"
                               Text="{Binding Path=Text}" />
                </DataTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="ComboBox.IsEnabled"
                     Value="True">
                <Setter Property="ComboBox.Foreground"
                        Value="{DynamicResource NormalForeground}" />
            </Trigger>
            <Trigger Property="ComboBox.IsEnabled"
                     Value="False">
                <Setter Property="ComboBox.Foreground"
                        Value="LightGray" />
            </Trigger>
        </Style.Triggers>
    </Style>


    <!-- Стиль поля ввода -->
    <Style x:Key="TextBox_Style">

        <Setter Property="TextBox.VerticalContentAlignment"
                Value="Center" />
        <Setter Property="TextBox.FontSize"
                Value="{DynamicResource DefaultFontSize}" />
        <Setter Property="TextBox.HorizontalAlignment"
                Value="Stretch" />

        <Style.Triggers>
            <Trigger Property="TextBox.IsEnabled"
                     Value="True">
                <Setter Property="TextBox.Foreground"
                        Value="{DynamicResource NormalForeground}" />
            </Trigger>
            <Trigger Property="TextBox.IsEnabled"
                     Value="False">
                <Setter Property="TextBox.Foreground"
                        Value="LightGray" />
            </Trigger>
        </Style.Triggers>
    </Style>

</ResourceDictionary>